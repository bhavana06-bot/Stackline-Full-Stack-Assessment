{"version":3,"sources":["utills/types.ts","components/ProductTable.tsx","container/ProductTableContainer.tsx","components/Tags.tsx","components/ProductSummary.tsx","container/ProductSummaryContainer.tsx","container/BannerLogoContainer.tsx","utills/graph.ts","components/ProductGraph.tsx","container/ProductGraphContainer.tsx","App.tsx","actions/actions.ts","constant.ts","reducers/productDataReducer.ts","index.tsx"],"names":["createProduct","productData","title","image","subtitle","tags","sales","ProductTable","_ref","columns","name","selector","row","Date","weekEnding","toLocaleDateString","sortable","sortFunction","a","b","getTime","retailSales","toLocaleString","wholesaleSales","unitsSold","retailerMargin","noDataComponent","_jsx","children","className","DataTable","data","defaultSortFieldId","ProductTableContainer","Tags","tagData","map","item","index","_jsxs","ProductSummary","productdata","src","alt","ProductSummaryContainer","product","BannerLogoContainer","aggregateSalesByMonth","reduce","acc","sale","monthKey","dateString","month","getMonth","concat","formatMonth","ProductGraph","transformedSaleData","LineChart","width","height","XAxis","dataKey","Line","stroke","type","ProductGraphContainer","aggregatedSales","Object","values","App","isloading","setIsLoading","useState","useSelector","state","error","dispatch","useDispatch","useEffect","async","response","fetch","payload","fetchDataSuccess","json","fetchDataFailure","message","length","initialState","undefined","productDataReducer","arguments","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.89439569.chunk.js","sourcesContent":["// Define the structure of a Product object\nexport interface Product {\n  title: string;         \n  image: string;        \n  subtitle: string;      \n  tags: string[];        \n  sales: WeeklySales[];  \n}\n\n// Define the structure for weekly sales data\nexport interface WeeklySales {\n  weekEnding: string;      \n  retailSales: number;     \n  wholesaleSales: number;  \n  unitsSold: number;      \n  retailerMargin: number;  \n}\n\n// Define the structure for application state\nexport interface ApplicationState {\n  data: any[];             // Array to store fetched data\n  error: string | undefined; // Error message (if any)\n}\n\n// Function to create a Product object from raw data\nexport function createProduct(productData: any): Product {\n  return {\n    title: productData[\"title\"],      \n    image: productData[\"image\"],      \n    subtitle: productData[\"subtitle\"],\n    tags: productData[\"tags\"],        \n    sales: productData[\"sales\"],     \n  };\n}\n\n// Function to create a WeeklySales object\nexport function createSaleData(\n  weekEnding: string,\n  retailSales: number,\n  wholesaleSales: number,\n  unitsSold: number,\n  retailerMargin: number\n): WeeklySales {\n  return {\n    weekEnding,\n    retailSales,\n    wholesaleSales,\n    unitsSold,\n    retailerMargin,\n  };\n}\n\n// Define action types for Redux state management \nexport type ActionTypes =\n  | { type: \"FETCH_DATA_SUCCESS\"; payload: any }      \n  | { type: \"FETCH_DATA_FAILURE\"; payload: string }; \n","import React from \"react\";\nimport { WeeklySales } from '../utills/types';\nimport DataTable from 'react-data-table-component';\n\ninterface ProductTableProps {\n  sales: WeeklySales[]; \n}\n\nconst ProductTable: React.FC<ProductTableProps> = ({ sales }) => {\n  // Define the columns for the DataTable\n  const columns = [\n    {\n      name: 'Week Ending',    \n      selector: (row: WeeklySales) => new Date(row.weekEnding).toLocaleDateString(),\n      sortable: true, // Allow sorting\n      sortFunction: (a: WeeklySales, b: WeeklySales) =>\n      new Date(a.weekEnding).getTime() - new Date(b.weekEnding).getTime(), // Custom sorting function\n\n    },\n    {\n      name: 'Retail Sales',\n      selector: (row: WeeklySales) => \"$\" + row.retailSales.toLocaleString(),\n      sortable: true,\n    },\n    {\n      name: 'Wholesale Sales',\n      selector: (row: WeeklySales) => \"$\" + row.wholesaleSales.toLocaleString(),\n      sortable: true,\n    },\n    {\n      name: 'Units Sold',\n      selector: (row: WeeklySales) => row.unitsSold.toLocaleString(),\n      sortable: true,\n    },\n    {\n      name: 'Retailer Margin',\n      selector: (row: WeeklySales) => \"$\" + row.retailerMargin.toLocaleString(),\n      sortable: true,\n    },\n  ];\n\n  // Define a custom message for when there is no data\n  const noDataComponent = <div>No data to display</div>;\n\n  return (\n    <div className=\"sales-column-table\">\n      {/* Render DataTable with the columns and sales data */}\n      <DataTable\n        columns={columns}\n        data={sales}\n        defaultSortFieldId={1} // Default column to sort by \n        noDataComponent={noDataComponent} \n      />\n    </div>\n  );\n};\n\nexport default ProductTable;\n","import React from \"react\";\nimport { createProduct } from \"../utills/types\"; \nimport ProductTable from \"../components/ProductTable\"; \n\ninterface ProductTableContainerProps {\n  data: any[];\n}\n\nconst ProductTableContainer: React.FC<ProductTableContainerProps> = ({ data }) => {\n  // Extract the first product and get its sales data\n  const product = createProduct(data[0]);\n  const sales = product.sales || []; // Default to an empty array if sales is undefined\n\n  return (\n    <div className=\"product-table-container\">\n      <ProductTable sales={sales} />\n    </div>\n  );\n};\n\nexport default ProductTableContainer;\n","import React from \"react\";\n\ninterface TagsProps {\n  tagData: any[];\n}\n\nconst Tags: React.FC<TagsProps> = ({ tagData }) => {\n  return (\n    <div>\n      <div className=\"tag-items\">\n        {/* Iterate over `tagData` and render each item as a tag */}\n        {tagData.map((item: string, index: number) => (\n          <span key={index} className=\"tag\">\n            {item} {/* Display each tag item */}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Tags; ","import React from \"react\";\nimport { Product } from '../utills/types';\nimport Tags from './Tags';\n\ninterface ProductSummaryProps {\n  productdata: Product; \n}\n\nconst ProductSummary: React.FC<ProductSummaryProps> = ({ productdata }) => {\n  return (\n    <div >\n      {/* Product Image and Title Section */}\n      <div className=\"product\">\n        <img\n          src={productdata.image} \n          className=\"product-image\"\n          alt={productdata.subtitle} \n        />\n        <div className=\"title-text\">\n          <p>{productdata.title}</p> \n          <p>{productdata.subtitle}</p>\n        </div>\n      </div>\n\n      {/* Product Tags Section */}\n      <div className=\"product-tags\">\n        <Tags tagData={productdata.tags} /> \n      </div>\n    </div>\n  );\n};\n\nexport default ProductSummary;\n","import React from \"react\";\nimport { createProduct } from \"../utills/types\"; \nimport ProductSummary from \"../components/ProductSummary\"; \n\ninterface ProductSummaryContainerProps {\n  data: any[]; \n}\n\nconst ProductSummaryContainer: React.FC<ProductSummaryContainerProps> = ({ data }) => {\n  // Extract the first product from data and transform it using createProduct\n  const product = createProduct(data[0]);\n\n  return (\n    <div className=\"product-summary-container\">\n      {/* Passing the processed product data to ProductSummary */}\n      <ProductSummary productdata={product} />\n    </div>\n  );\n};\n\nexport default ProductSummaryContainer;\n","\n\nimport React  from \"react\";\n\nconst BannerLogoContainer: React.FC= () => {\n  \n    return (\n      <div className=\"banner\">\n      <header>\n      </header>\n    </div>\n    );\n  };\n\n  export default BannerLogoContainer;","import { WeeklySales } from './types';\n\n/**\n * Formats a given date into a three-letter month abbreviation (e.g., \"JAN\", \"FEB\").\n * @param {Date} dateString - The date to format.\n * @returns {string} - The formatted month abbreviation.\n */\nconst formatMonth = (dateString: Date): string => {\n  const date = new Date(dateString);\n  const monthNames = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n  const month = monthNames[date.getMonth()];\n\n  return `${month}`;\n};\n\n/**\n * Aggregates sales data by month, summing up values for retail sales, wholesale sales, \n * units sold, and retailer margin.\n * @param {WeeklySales[]} sales - Array of weekly sales data.\n * @returns {Record<string, WeeklySales>} - A record where the keys are month abbreviations \n * and values are the aggregated sales data for that month.\n */\nconst aggregateSalesByMonth = (sales: WeeklySales[]): Record<string, WeeklySales> => {\n  return sales.reduce((acc, sale) => {\n    const date = new Date(sale.weekEnding);\n    const monthKey = formatMonth(date); // Get month abbreviation\n\n    // Initialize the month's sales data if not already present\n    if (!acc[monthKey]) {\n      acc[monthKey] = {\n        weekEnding: monthKey,   // Use the month abbreviation as the key\n        retailSales: 0,\n        wholesaleSales: 0,\n        unitsSold: 0,\n        retailerMargin: 0\n      };\n    }\n\n    // Aggregate sales data for the month\n    acc[monthKey].retailSales += sale.retailSales;\n    acc[monthKey].wholesaleSales += sale.wholesaleSales;\n    acc[monthKey].unitsSold += sale.unitsSold;\n    acc[monthKey].retailerMargin += sale.retailerMargin;\n\n    return acc;\n  }, {} as Record<string, WeeklySales>);\n};\n\n// Exporting utility functions\nexport { formatMonth, aggregateSalesByMonth };\n","import React from \"react\";\nimport { LineChart, Line, XAxis } from \"recharts\";\n\ninterface ProductGraphProps{\n    transformedSaleData: any\n}\n\nconst ProductGraph: React.FC<ProductGraphProps>= ({transformedSaleData}) => {\n  \n    return (\n    <div>\n      <LineChart width={900} height={400} data={transformedSaleData}>\n        <XAxis dataKey=\"weekEnding\" />\n     {/* Lines for retail sales and wholesale sales */}\n        <Line  dataKey=\"retailSales\" stroke=\"#40a8ef\" />\n        <Line type=\"monotone\" dataKey=\"wholesaleSales\" stroke=\"#3c4858\" />\n      </LineChart>\n      </div>\n    );\n  };\n\n  export default ProductGraph;","\n\nimport React from \"react\";\nimport { createProduct } from '../utills/types'\nimport { aggregateSalesByMonth } from '../utills/graph'\nimport ProductGraph from '../components/ProductGraph'\n\ninterface ProductGraphContainerProps {\n  data: any[];\n}\n\nconst ProductGraphContainer: React.FC<ProductGraphContainerProps> = ({ data }) => {\n\n  const product = createProduct(data[0]);\n  const sales = product.sales || [];\n  //Aggregate sales by month using the `aggregateSalesByMonth` function\n  const aggregatedSales = aggregateSalesByMonth(sales);\n  //Convert aggregated sales data to an array (assuming the function returns an object)\n  const transformedSaleData = Object.values(aggregatedSales);\n  return (\n    <div className=\"product-graph-container\">\n      <ProductGraph transformedSaleData={transformedSaleData} />\n    </div>\n  );\n};\n\nexport default ProductGraphContainer;","import  { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ProductTableContainer from './container/ProductTableContainer'\nimport ProductSummaryContainer from './container/ProductSummaryContainer'\nimport { fetchData } from './actions/actions';\nimport { ApplicationState } from './utills/types'\nimport BannerLogoContainer from './container/BannerLogoContainer'\nimport ProductGraphContainer from './container/ProductGraphContainer'\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction App() {\n  const [isloading, setIsLoading] = useState(false)\n  const data = useSelector((state: ApplicationState) => state.data);\n  const error = useSelector((state: ApplicationState) => state.error);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true)\n    dispatch(fetchData());\n    setIsLoading(false)\n\n  }, [dispatch])\n  if (isloading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n  return (\n    <div className=\"product-dashboard\">\n      <BannerLogoContainer />\n      {data && data.length !== 0 && (\n        <div className=\"product-container\">\n          <ProductSummaryContainer data={data} />\n          <div className=\"sales-column-trend\">\n            <ProductGraphContainer data={data} />\n            <ProductTableContainer data={data} />\n          </div>\n        </div>\n      )}\n    </div>\n\n  );\n}\n\n\n\nexport default App;\n","import { Dispatch } from \"redux\";\nimport { ActionTypes } from '../utills/types'\nimport { FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from \"../constant\";\n\nexport const fetchDataSuccess = (data: any): ActionTypes => ({\n  type: FETCH_DATA_SUCCESS,\n  payload: data\n});\n\nexport const fetchDataFailure = (error: string): ActionTypes => ({\n  type: FETCH_DATA_FAILURE,\n  payload: error\n});\n\nexport const fetchData = () => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    try {\n      // API call to fetch mock data\n      const response = await fetch(\"https://mocki.io/v1/cd569385-602e-4776-99a1-edb3f911d869\"); // mock api \n      const data = await response.json();\n      dispatch(fetchDataSuccess(data));\n    } catch (error: any) {\n      dispatch(fetchDataFailure(error.message));\n    }\n  };\n};\n\n","export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';\nexport const SORT = \"SORT\";\nexport const FETCH = \"FETCH\";","import {ApplicationState,ActionTypes} from '../utills/types'\n  // Define the initial state\nconst initialState: ApplicationState = {\n  data: [],\n  error: undefined,\n  };\n\n  \n\n  const productDataReducer = (state: ApplicationState = initialState, action: ActionTypes): ApplicationState => {\n    switch (action.type) {\n      case \"FETCH_DATA_SUCCESS\":{\n        state.error = \"\";\n        state.data = action.payload;\n        return state;\n      }\n      case \"FETCH_DATA_FAILURE\":{\n        state.error = action.payload\n        state.data =[];\n        return state;\n      }\n      default:\n        return state;\n    }\n  };\n  \n  export default productDataReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport {thunk} from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport productDataReducer from './reducers/productDataReducer'\nconst store = createStore(productDataReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}