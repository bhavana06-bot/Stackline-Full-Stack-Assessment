{"version":3,"sources":["utills/types.ts","components/ProductTable.tsx","container/ProductTableContainer.tsx","components/Tags.tsx","components/ProductSummary.tsx","container/ProductSummaryContainer.tsx","container/BannerLogoContainer.tsx","utills/graph.ts","components/ProductGraph.tsx","container/ProductGraphContainer.tsx","App.tsx","actions/actions.ts","constant.ts","reducers/productDataReducer.ts","index.tsx"],"names":["createProduct","productData","title","image","subtitle","tags","sales","ProductTable","_ref","columns","name","selector","row","Date","weekEnding","toLocaleDateString","sortable","retailSales","toLocaleString","wholesaleSales","unitsSold","retailerMargin","noDataComponent","_jsx","children","className","DataTable","data","defaultSortFieldId","ProductTableContainer","Tags","tagData","console","log","_jsxs","map","item","index","ProductSummary","productdata","src","alt","ProductSummaryContainer","product","BannerLogoContainer","aggregateSalesByMonth","reduce","acc","sale","monthKey","dateString","month","getMonth","concat","formatMonth","ProductGraph","transformedSaleData","LineChart","width","height","XAxis","dataKey","Line","type","stroke","ProductGraphContainer","aggregatedSales","Object","values","App","isloading","setIsLoading","useState","useSelector","state","error","dispatch","useDispatch","useEffect","async","response","fetch","json","payload","fetchDataSuccess","fetchDataFailure","message","length","initialState","undefined","productDataReducer","arguments","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.fa3603ab.chunk.js","sourcesContent":["\n\n\n\n/**\n * State types\n */export interface Product {\n  title: string;\n  image: string;\n  subtitle: string;\n  tags: string[];\n  sales: WeeklySales[];\n}\nexport interface WeeklySales {\n  weekEnding: string;\n  retailSales: number;\n  wholesaleSales: number;\n  unitsSold: number;\n  retailerMargin: number;\n}\n\n\nexport interface ApplicationState {\n  data: any[];\n  error: string | undefined;\n   }\n\n  \n  export function createProduct(productData: any): Product {\n    return {\n      title: productData[\"title\"],\n      image: productData[\"image\"],\n      subtitle: productData[\"subtitle\"],\n      tags: productData[\"tags\"],\n      sales: productData[\"sales\"],\n    };\n  }\n\n  export  function createSaleData(\n    weekEnding: string,\n    retailSales: number,\n    wholesaleSales: number,\n    unitsSold: number,\n    retailerMargin: number\n  ): WeeklySales {\n    return {\n      weekEnding,\n      retailSales,\n      wholesaleSales,\n      unitsSold,\n      retailerMargin,\n     \n    };\n  }\n \n\n export  type ActionTypes =\n| { type: \"FETCH\",data: any }\n| { type: \"SORT\",key:string }\n|{type:\"FETCH_DATA_REQUEST\"}\n|{type:\"FETCH_DATA_SUCCESS\",payload: any}\n|{type:\"FETCH_DATA_FAILURE\",payload:string}\n\n;","import React, { useState } from \"react\";\nimport {ApplicationState,createProduct,Product,WeeklySales} from '../utills/types'\nimport DataTable from 'react-data-table-component';\ninterface ProductTableProps {\n    sales: any;\n  }\nconst ProductTable: React.FC<ProductTableProps> = ({sales}) => {\n  \n\n    \n    \n        const columns = [\n            {\n              name: 'Week Ending',\n              selector: (row: WeeklySales) => new Date(row.weekEnding).toLocaleDateString(),\n              sortable: true,\n            },\n            {\n              name: 'Retail Sales',\n              selector: (row: WeeklySales) => \"$\" + row.retailSales.toLocaleString(),\n              sortable: true,\n            },\n            {\n              name: 'Wholesale Sales',\n              selector: (row: WeeklySales) => \"$\" + row.wholesaleSales.toLocaleString(),\n              sortable: true,\n            },\n            {\n              name: 'Units Sold',\n              selector: (row: WeeklySales) => row.unitsSold.toLocaleString(),\n              sortable: true,\n            },\n            {\n              name: 'Retailer Margin',\n              selector: (row: WeeklySales) => \"$\" + row.retailerMargin.toLocaleString(),\n              sortable: true,\n            },\n          ];\n        \n          const noDataComponent = (\n            <div>No data to display</div>\n          );\n        \n          return (\n            <div className=\"sales-column-table\">\n              <DataTable\n              //className=\"sales-column-table\"\n                columns={columns}\n                data={sales}\n                defaultSortFieldId={1}\n                noDataComponent={noDataComponent}\n              />\n            </div>\n          );\n        };\n     \n   \n\n  export default ProductTable;","import React from \"react\";\nimport {createProduct} from '../utills/types'\nimport ProductTable from '../components/ProductTable';\n\ninterface ProductTableContainer {\n  data: any[]; \n}\nconst ProductTableContainer: React.FC<ProductTableContainer> = ({data}) => {\n  const product = createProduct(data[0]);\n  const sales = product.sales || [];\n\n\n    return (\n    \n      <div className=\"product-table-container\" >\n        <ProductTable sales={sales}/>\n        </div>\n     \n    );\n  };\n\n\n  \n  \n  \n  export default ProductTableContainer;\n  \n  ","\n\n\nimport React, { useState } from \"react\";\n\ninterface TagsProps {\n    tagData: any [];\n  }\n\nconst Tags: React.FC< TagsProps>= ({tagData}) => {\n  \nconsole.log('tagData',tagData);\n    return (\n    <div>\n        <hr />\n      <div className=\"tag-items\">\n        {tagData.map((item: string, index: number) => (\n          <span key={index} className=\"tag\">\n            {item}\n          </span>\n        ))}\n      </div>\n      <hr />\n      </div>\n    );\n  };\n\n  export default Tags;","import React, { useState } from \"react\";\nimport {Product} from '../utills/types';\nimport Tags from './Tags'\n\ninterface ProductSummaryProps {\n    productdata: Product;\n  }\nconst ProductSummary: React.FC<ProductSummaryProps> = ({ productdata }) => {\n  \n\n    return (\n    <div>\n        <div className=\"product\">\n        <img\n          src={productdata.image}\n          className=\"product-image\"\n          alt={productdata.subtitle}\n        />\n        <div className=\"title-text\">\n          <p>{productdata.title}</p>\n          <p>{productdata.subtitle}</p>\n        </div>\n      </div>\n      <div className=\"product-tags\">\n       <Tags tagData={productdata.tags} />\n      </div>\n      </div>\n    );\n  };\n\n  export default ProductSummary;","import React, { useState } from \"react\";\nimport {  useSelector } from \"react-redux\";\nimport {ApplicationState,createProduct,Product} from '../utills/types'\nimport ProductSummary from '../components/ProductSummary'\n\ninterface ProductSummaryContainer {\n    data: any[]; // Replace `any` with the appropriate type if you have it\n  }\nconst ProductSummaryContainer: React.FC<ProductSummaryContainer> = ({data}) => {\n    const product = createProduct(data[0]);\n    return (\n        <div className=\"product-summary-container\">\n       \n          <ProductSummary productdata={product} />\n        \n      </div>\n     \n    );\n  };\n\n  export default ProductSummaryContainer;","\n\nimport React, { useState } from \"react\";\n\n\n\nconst BannerLogoContainer: React.FC= () => {\n  \n    return (\n      <div className=\"banner\">\n      <header>\n      </header>\n    </div>\n    );\n  };\n\n  export default BannerLogoContainer;","\nimport {WeeklySales} from './types';\n\n\nconst formatMonth = (dateString: Date): string => {\n  const date = new Date(dateString);\n  const monthNames = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n  const month = monthNames[date.getMonth()];\n \n  return `${month}`;\n};\n\n\nconst aggregateSalesByMonth = (sales: WeeklySales[]): Record<string, WeeklySales> => {\n  return sales.reduce((acc, sale) => {\n      const date = new Date(sale.weekEnding);\n      const monthKey = formatMonth(date);\n\n      if (!acc[monthKey]) {\n          acc[monthKey] = {\n              weekEnding: monthKey,\n              retailSales: 0,\n              wholesaleSales: 0,\n              unitsSold: 0,\n              retailerMargin: 0\n          };\n      }\n\n      acc[monthKey].retailSales += sale.retailSales;\n      acc[monthKey].wholesaleSales += sale.wholesaleSales;\n      acc[monthKey].unitsSold += sale.unitsSold;\n      acc[monthKey].retailerMargin += sale.retailerMargin;\n\n      return acc;\n  }, {} as Record<string, WeeklySales>);\n};\nexport {formatMonth,aggregateSalesByMonth};","\n\nimport React from \"react\";\nimport { LineChart, Line, XAxis } from \"recharts\";\n\ninterface ProductGraphProps{\n    transformedSaleData: any\n}\n\nconst ProductGraph: React.FC<ProductGraphProps>= ({transformedSaleData}) => {\n  \n    return (\n    <div>\n      <LineChart width={900} height={400} data={transformedSaleData}>\n        <XAxis dataKey=\"weekEnding\" />\n     \n        <Line type=\"monotone\" dataKey=\"retailSales\" stroke=\"#40a8ef\" />\n        <Line type=\"monotone\" dataKey=\"wholesaleSales\" stroke=\"#3c4858\" />\n      </LineChart>\n      </div>\n    );\n  };\n\n  export default ProductGraph;","\n\nimport React, { useState } from \"react\";\nimport {createProduct} from '../utills/types'\nimport {formatMonth,aggregateSalesByMonth} from '../utills/graph'\nimport ProductGraph from '../components/ProductGraph'\ninterface ProductGraphContainer {\n    data: any[]; \n  }\n\n  \nconst ProductGraphContainer: React.FC<ProductGraphContainer>= ({data}) => {\n  \n    const product = createProduct(data[0]);\n    const sales = product.sales || [];\n    const aggregatedSales = aggregateSalesByMonth(sales);\n    const transformedSaleData = Object.values(aggregatedSales);\n  return (\n    <div className=\"product-graph-container\">\n      <ProductGraph transformedSaleData={transformedSaleData}/>\n    </div>\n  );\n};\n\n  export default ProductGraphContainer;","import  { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ProductTableContainer from './container/ProductTableContainer'\nimport ProductSummaryContainer from './container/ProductSummaryContainer'\nimport { fetchData } from './actions/actions';\nimport { ApplicationState } from './utills/types'\nimport BannerLogoContainer from './container/BannerLogoContainer'\nimport ProductGraphContainer from './container/ProductGraphContainer'\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction App() {\n  const [isloading, setIsLoading] = useState(false)\n  const data = useSelector((state: ApplicationState) => state.data);\n  const error = useSelector((state: ApplicationState) => state.error);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true)\n    dispatch(fetchData());\n    setIsLoading(false)\n\n  }, [dispatch])\n  if (isloading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n  return (\n    <div className=\"product-dashboard\">\n      <BannerLogoContainer />\n      {data && data.length !== 0 && (\n        <div className=\"product-container\">\n          <ProductSummaryContainer data={data} />\n          <div className=\"sales-column-trend\">\n            <ProductGraphContainer data={data} />\n            <ProductTableContainer data={data} />\n          </div>\n        </div>\n      )}\n    </div>\n\n  );\n}\n\n\n\nexport default App;\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport {ApplicationState,ActionTypes} from '../utills/types'\nimport { SORT, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS,FETCH_DATA_FAILURE,FETCH} from \"../constant\";\n\n\n\n\n  \n  export const fetchDataSuccess = (data: any): ActionTypes => ({\n    type: FETCH_DATA_SUCCESS,\n    payload: data\n  });\n  \n  export const fetchDataFailure = (error: string): ActionTypes => ({\n    type: FETCH_DATA_FAILURE,\n    payload: error\n  });\n\nexport const fetchData = () => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    try {\n      const response = await fetch(\"https://mocki.io/v1/cd569385-602e-4776-99a1-edb3f911d869\");\n      const data = await response.json();\n      console.log('data in fetch',data);\n      dispatch(fetchDataSuccess(data));\n    } catch (error: any) {\n      dispatch(fetchDataFailure(error.message));\n    }\n  };\n};\n\n","export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';\nexport const SORT = \"SORT\";\nexport const FETCH = \"FETCH\";","import {ApplicationState,ActionTypes} from '../utills/types'\n  // Define the initial state\nconst initialState: ApplicationState = {\n  data: [],\n  error: undefined,\n  };\n\n  \n\n  const productDataReducer = (state: ApplicationState = initialState, action: ActionTypes): ApplicationState => {\n    switch (action.type) {\n      case \"FETCH_DATA_SUCCESS\":{\n        state.error = \"\";\n        state.data = action.payload;\n        return state;\n      }\n      case \"FETCH_DATA_FAILURE\":{\n        state.error = action.payload\n        state.data =[];\n        return state;\n      }\n      default:\n        return state;\n    }\n  };\n  \n  export default productDataReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport {thunk} from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport productDataReducer from './reducers/productDataReducer'\nconst store = createStore(productDataReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}