{"ast":null,"code":"var _jsxFileName = \"/Users/bhavanamannam/Desktop/bhavana study meterial/react js/Stackline-Full-Stack-Assessment/react-typescript-taskify/src/container/ProductGraphContainer.tsx\";\nimport React from \"react\";\nimport { createProduct } from '../utills/types';\nimport { LineChart, Line, XAxis } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatMonth = dateString => {\n  const date = new Date(dateString);\n  const options = {\n    month: 'long'\n  }; // e.g., \"January 2025\"\n  return date.toLocaleDateString('en-US', options);\n};\nconst ProductGraphContainer = ({\n  data\n}) => {\n  const product = createProduct(data[0]);\n  const sales = product.sales || [];\n  const transformedData = sales.map(item => ({\n    ...item,\n    month: formatMonth(item.weekEnding)\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chart\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 900,\n      height: 400,\n      data: transformedData,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"retailSales\",\n        stroke: \"#40a8ef\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"wholesaleSales\",\n        stroke: \"#3c4858\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = ProductGraphContainer;\nexport default ProductGraphContainer;\nvar _c;\n$RefreshReg$(_c, \"ProductGraphContainer\");","map":{"version":3,"names":["React","createProduct","LineChart","Line","XAxis","jsxDEV","_jsxDEV","formatMonth","dateString","date","Date","options","month","toLocaleDateString","ProductGraphContainer","data","product","sales","transformedData","map","item","weekEnding","id","children","width","height","dataKey","fileName","_jsxFileName","lineNumber","columnNumber","type","stroke","_c","$RefreshReg$"],"sources":["/Users/bhavanamannam/Desktop/bhavana study meterial/react js/Stackline-Full-Stack-Assessment/react-typescript-taskify/src/container/ProductGraphContainer.tsx"],"sourcesContent":["\n\nimport React, { useState } from \"react\";\nimport {createProduct} from '../utills/types'\n\nimport { useSelector } from \"react-redux\";\nimport { LineChart, Line, XAxis, Tooltip } from \"recharts\";\ninterface ProductGraphContainer {\n    data: any[]; // Replace `any` with the appropriate type if you have it\n  }\n\n  const formatMonth = (dateString: string): string => {\n    const date = new Date(dateString);\n    const options: Intl.DateTimeFormatOptions = { month: 'long' }; // e.g., \"January 2025\"\n    return date.toLocaleDateString('en-US', options);\n};\nconst ProductGraphContainer: React.FC<ProductGraphContainer>= ({data}) => {\n  \n    const product = createProduct(data[0]);\n    const sales = product.sales || [];\n    const transformedData = sales.map(item => ({\n        ...item,\n        month: formatMonth(item.weekEnding),\n    }));\n  return (\n    <div id=\"chart\">\n      <LineChart width={900} height={400} data={transformedData}>\n        <XAxis dataKey=\"month\" />\n     \n        <Line type=\"monotone\" dataKey=\"retailSales\" stroke=\"#40a8ef\" />\n        <Line type=\"monotone\" dataKey=\"wholesaleSales\" stroke=\"#3c4858\" />\n      </LineChart>\n    </div>\n  );\n};\n\n  export default ProductGraphContainer;"],"mappings":";AAEA,OAAOA,KAAK,MAAoB,OAAO;AACvC,SAAQC,aAAa,QAAO,iBAAiB;AAG7C,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,QAAiB,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKzD,MAAMC,WAAW,GAAIC,UAAkB,IAAa;EAClD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,MAAMG,OAAmC,GAAG;IAAEC,KAAK,EAAE;EAAO,CAAC,CAAC,CAAC;EAC/D,OAAOH,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAEF,OAAO,CAAC;AACpD,CAAC;AACD,MAAMG,qBAAsD,GAAEA,CAAC;EAACC;AAAI,CAAC,KAAK;EAEtE,MAAMC,OAAO,GAAGf,aAAa,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC;EACtC,MAAME,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,EAAE;EACjC,MAAMC,eAAe,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,KAAK;IACvC,GAAGA,IAAI;IACPR,KAAK,EAAEL,WAAW,CAACa,IAAI,CAACC,UAAU;EACtC,CAAC,CAAC,CAAC;EACL,oBACEf,OAAA;IAAKgB,EAAE,EAAC,OAAO;IAAAC,QAAA,eACbjB,OAAA,CAACJ,SAAS;MAACsB,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE,GAAI;MAACV,IAAI,EAAEG,eAAgB;MAAAK,QAAA,gBACxDjB,OAAA,CAACF,KAAK;QAACsB,OAAO,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEzBxB,OAAA,CAACH,IAAI;QAAC4B,IAAI,EAAC,UAAU;QAACL,OAAO,EAAC,aAAa;QAACM,MAAM,EAAC;MAAS;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/DxB,OAAA,CAACH,IAAI;QAAC4B,IAAI,EAAC,UAAU;QAACL,OAAO,EAAC,gBAAgB;QAACM,MAAM,EAAC;MAAS;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAACG,EAAA,GAlBInB,qBAAsD;AAoB1D,eAAeA,qBAAqB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}